package day3_test

import (
	"adventofcode2020/internal/pkg/day3"
	"reflect"
	"strings"
	"testing"
)

func TestReadInput(t *testing.T) {
	input := strings.NewReader(`..##.......
#...#...#..
.#....#..#.
..#.#...#.#
.#...##..#.
..#.##.....
.#.#.#....#
.#........#
#.##...#...
#...##....#
.#..#...#.#`)
	expected := [][]rune{
		{'.', '.', '#', '#', '.', '.', '.', '.', '.', '.', '.'},
		{'#', '.', '.', '.', '#', '.', '.', '.', '#', '.', '.'},
		{'.', '#', '.', '.', '.', '.', '#', '.', '.', '#', '.'},
		{'.', '.', '#', '.', '#', '.', '.', '.', '#', '.', '#'},
		{'.', '#', '.', '.', '.', '#', '#', '.', '.', '#', '.'},
		{'.', '.', '#', '.', '#', '#', '.', '.', '.', '.', '.'},
		{'.', '#', '.', '#', '.', '#', '.', '.', '.', '.', '#'},
		{'.', '#', '.', '.', '.', '.', '.', '.', '.', '.', '#'},
		{'#', '.', '#', '#', '.', '.', '.', '#', '.', '.', '.'},
		{'#', '.', '.', '.', '#', '#', '.', '.', '.', '.', '#'},
		{'.', '#', '.', '.', '#', '.', '.', '.', '#', '.', '#'},
	}
	result, _ := day3.ReadInput(input)

	if !reflect.DeepEqual(result, expected) {
		t.Fatalf("expected %v, got %v", expected, result)
	}
}

func TestCountTreesByMoving(t *testing.T) {
	input := [][]rune{
		{'.', '.', '#', '#', '.', '.', '.', '.', '.', '.', '.'},
		{'#', '.', '.', '.', '#', '.', '.', '.', '#', '.', '.'},
		{'.', '#', '.', '.', '.', '.', '#', '.', '.', '#', '.'},
		{'.', '.', '#', '.', '#', '.', '.', '.', '#', '.', '#'},
		{'.', '#', '.', '.', '.', '#', '#', '.', '.', '#', '.'},
		{'.', '.', '#', '.', '#', '#', '.', '.', '.', '.', '.'},
		{'.', '#', '.', '#', '.', '#', '.', '.', '.', '.', '#'},
		{'.', '#', '.', '.', '.', '.', '.', '.', '.', '.', '#'},
		{'#', '.', '#', '#', '.', '.', '.', '#', '.', '.', '.'},
		{'#', '.', '.', '.', '#', '#', '.', '.', '.', '.', '#'},
		{'.', '#', '.', '.', '#', '.', '.', '.', '#', '.', '#'},
	}
	expected := 7
	result := day3.CountTreesByMoving(input, 3, 1)

	if result != expected {
		t.Fatalf("expected %v, got %v", expected, result)
	}
}
